#+TITLE: 用 Python 做数据分析
#+AUTHOR:
#+DATE:
#+EMAIL:
#+OPTIONS: H:3 num:t toc:2 \n:t @:t ::t |:t ^:{} _:{} *:t TeX:t
#+HTML_MATHJAX: align:left indent:5em tagside:left font:Neo Euler
#+LATEX_CLASS: ctexart
#+LATEX_CLASS_OPTIONS: [UTF8]
#+LATEX_CLASS_OPTIONS: [a4paper,12pt]
# #+LATEX_HEADER: \usepackage{styles/hqstyle}
#+Tags:

* README
** 书名简写
|-----------------------------------------------------+----------------+------|
| 书名                                                | 简写           | 代码 |
|-----------------------------------------------------+----------------+------|
| 薛毅, 陈立萍. 统计建模与R软件. 清华大学出版社, 2007 | 统计建模       | tjjm |
| 常国珍. Python 数据科学：技术详解与商业实践         | Python数据科学 | sjkx |
|-----------------------------------------------------+----------------+------|

* 工具与环境 
** 安装Python
- 安装 Anaconda
  从 Anaconda 官网下载对应操作系统的版本，安装
  足够完成绝大部分数据分析
- 安装 Python3
  从 Python 官网下载对应操作系统版本，安装
  需要的扩展包用 pip 安装
** python 的包管理和环境配置 
在Python世界，虽然有很多工具可以搞一点依赖管理，但每一个工具都不能解决全部问题。
- pip 可以管理 Python 依赖，但是pip包都是源码包，得在安装时编译，常常由于系统环境的原因而编译失败。此外 pip 也不能用来安装官方版的 opencv 这样的原生库。
- pyenv可以管理 Python 版本 Virtualenv 和 venv 可以创建虚拟环境，让多个项目之间的 Python 依赖隔离开，不会在项目之间冲突。
- pipenv 把 pip、pyenv 和 virtualenv 的功能整合到一起，但是仍然没有解决源码编译的问题和原生库的安装问题。
- Conda是个包管理器，可以支持二进制包，所以不需要安装时从源码编译了，而且也可以装原生库。但是，一些 pip 里的 Python 库在 conda 里找不到。
- Anaconda是用 Conda 管理的 Python 科学计算发行版 Conda Forge 是另一个 Python 发行版，要比 Anaconda 的包更丰富。但这里有个坑就是 Conda Forge 和 Anaconda 并不完全兼容，如果你有一个项目同时用到 Anaconda 和 Conda Forge 里的包，有可能会挂。
- Anaconda Project可以在一个项目里创建多个虚拟环境，既可以管理conda依赖，也可以管理pip依赖，但还是缺了CUDA这样的系统包和一些命令行工具。
- Apt 之类的系统包管理工具可以安装系统包，但是会受到操作系统发行版的限制，比如说 Ubuntu 14.04 里就装不了 CUDA 9。
- Docker可以在容器里装一个操作系统发行版，从而可以方便的切换操作系统版本。但是容器和宿主必须要共享操作系统内核，所以没办法在macOS直接运行 Linux 发行版的 docker 容器。
- nvidia-docker 可以把宿主的 GPU 设备文件和驱动挂载到 Docker 容器里 ，但是只支持 Linux。这些工具解决的问题虽然不完全一样，但也有一部分重叠。
  建议：
  - 如果临时写几行不在项目里的代码，用操作系统全局的 Anaconda 环境。
  - 如果需要创建多个数据挖掘或科学计算的项目，那么用 Anaconda Project 隔离这些项目，不要用 pipenv。
  - 如果需要创建多个 Python 网站的项目，那么用 pipenv 隔离这些项目，不要用 conda。
  - 用 Anaconda Project 管理的项目中，如果需要安装纯 Python 库，优先用 pip 包，如果是需要额外编译的库，优先用 conda 包。
  - 如果需要隔离系统环境，用 Linux 版的 Docker，在容器里安装系统依赖。
  - conda 和 Linux 发行版都有的二进制包，优先用 conda 装。因为发行版发布周期慢，版本旧。
* 用 Python 操作简单的数据对象
** 扩展库 SciPy 介绍
*** SciPy - 科学计算生态
- 科学计算库
  SciPy 是最流行的科学计算库之一
  主要为数学、科学和工程服务 
- 开源
  即源代码是公开的
- 是基于 Python 的软件生态系统
  SciPy 包含了一系列的扩展包，这些扩展包之间相互支持，相互依赖
  核心库包括：NumPy, SciPy library, Matplotlib, IPython, SymPy, pandas
- 官网
  网址：https://scipy.org/
  应多看官网，官网的信息和教程往往是最权威，最全面的
下面介绍的几个库都属于 SciPy 家族
*** Numpy - 处理数组的强大工具
**** [[https://blog.csdn.net/sinat_34474705/article/details/74458605][为什么要用 Numpy]]
Python中提供了list容器，可以当作数组使用。但列表中的元素可以是任何对象，因此列表中保存的是对象的指针，这样一来，为了保存一个简单的列表[1,2,3]。就需要三个指针和三个整数对象。对于数值运算来说，这种结构显然不够高效。Python虽然也提供了array模块，但其只支持一维数组，不支持多维数组，也没有各种运算函数。因而不适合数值运算。NumPy的出现弥补了这些不足。 (from: 张若愚, Python科学计算)
**** 特征
- 强大的 ndarray 对象和 ufunc 函数
- 精巧的函数
- 比较适合线性代数和随机数处理等科学计算
- 有效的通用多维数据，可定义任意数据类型
- 无缝对接数据库
*** SciPy 核心库 - 整合各类包和工具
**** 特征
- Python 中科学计算的核心包
- 协同 NumPy 和 SciPy
- 协同科学计算中常见问题的工具箱
  如：插值、积分、优化和图像处理等
**** 例 
:LOGBOOK:
CLOCK: [2019-04-04 Thu 11:16]
:END:
#+begin_src python :results output :exports both 
import numpy as np
from scipy import linalg
arr = np.array([[1,2],[3,4]])
print(linalg.det(arr))
#+end_src

#+RESULTS:
: -2.0

*** Matplotlib - 制作精良的数据图
**** 特征：
- 基于 NumPy
- 二维会图库
  简单快速的生成曲线图，直方图和散点图等
- 常用的 pyplot 是一个简单提供类似 MATLAB 接口的模块
**** 例
- 生成一条直线
#+begin_src python
  import matplotlib.pyplot as plt
  plt.plot([1, 2, 3, 4])
  plt.ylabel('some numbers')
  plt.show()
#+end_src
- 生成一条曲线
#+BEGIN_SRC python
  plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
#+END_SRC
- 散点图
#+BEGIN_SRC python
plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'ro')
plt.axis([0, 6, 0, 20])
plt.show()
#+END_SRC
- 用 NumPy 生成数据并作图
#+BEGIN_SRC python
import numpy as np
# evenly sampled time at 200ms intervals
t = np.arange(0., 5., 0.2)
# red dashes, blue squares and green triangles
plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')
plt.show()
#+END_SRC
 
*** IPython - 交互式的 Python 代码界面
*** pandas - 数据框工具
**** 特征
- 基于 SciPy 和 NumPy
- 高效的 Series 和 DataFrame 数据结构
- 强大的可扩展数据操作与分析的 Python 库
- 高效处理大数据集的切片等功能
- 读写多种文件格式，如 CSV
** 创建数组
*** 基本概念
**** 函数
- array - 创建数组
**** 概念
- ndarray - n 维数组
  - 所有元素为同一类型
  - 节省内存和计算时间
  - 有丰富的处理方法
*** 导入 Numpy
#+BEGIN_SRC python
import numpy as np
#+END_SRC
*** 手工输入数据来创建数组
手工输入数组中的每一个元素
- 例
#+BEGIN_SRC python
## 常规创建方法
a = np.array([2, 3, 4])
b = np.array([2.0, 3.0, 4.0])
c = np.array([[1.0, 2.0], [3.0, 4.0]])
d = np.array([[1, 2], [3, 4]], dtype=complex) # 指定数据类型
print(a, a.dtype)
print(b, b.dtype)
print(c, c.dtype)
print(d, d.dtype)
#+END_SRC
*** 用函数来创建数组
- 创建数组的常用函数
  #+BEGIN_SRC python
    ## 创建数组的常用函数
    print(np.arange(0,7,1,dtype=np.int16)) # 0为起点，间隔为1时可缺省(引起歧义下不可缺省)
    print(np.ones((2,3,4),dtype=np.int16)) # 2页，3行，4列，全1，指定数据类型
    print(np.zeros((2,3,4))) # 2页，3行，4列，全0
    print(np.empty((2,3))) # 值取决于内存
    print(np.arange(0,10,2)) # 起点为0，不超过10，步长为2
    print(np.arange(1,6,2)) # 起点为1，不超过6，步长为2
    print(np.linspace(-1,2,5)) # 起点为-1，终点为2，取5个点
    print(np.random.randint(0,3,(2,3))) # 大于等于0，小于3，2行3列的随机整数
  #+END_SRC
- 从函数创建数组
  #+BEGIN_SRC python
    import numpy as np
    np.fromfunction(lambda i,j: (i + 1)*(j + 1), (9, 9))
  #+END_SRC
*** 数据类型转换
#+BEGIN_SRC python
  ## 数据类型转换
  print(float(1))
  print(int(1.0))
  print(bool(2))
  print(float(True))
#+END_SRC
*** 数组结构转换
- 改变数组的形状
  #+BEGIN_SRC python
      beforeArray = np.array([[1,2,3],[4,5,6]])
      print(beforeArray)
      afterArray = beforeArray.reshape(3,2)
      print(afterArray)
      print(beforeArray)      
  #+END_SRC
  要想真正真正改变 beforeArray 的形状
  #+BEGIN_SRC python
      beforeArray.resize(3,2)
  #+END_SRC
*** 用函数式编程的方式处理数组
python 的函数式编程非常方便，不一定需要给对象取名，例如：
#+BEGIN_SRC python
      np.arange(12).reshape(3,4) # 可以改变输出形状
      np.arange(24).reshape(2,3,4) # 2页，3行，4页
#+END_SRC
** 基本运算
*** 元素级运算
#+BEGIN_SRC python
## 元素级运算
a = np.array([1,2,3,4])
b = np.arange(4)
print(a, b)
print(a-b)
print(a*b)
print(a**2)
print(2*np.sin(a))
print(a>2)
print(np.exp(a)) # 指数
#+END_SRC
*** 矩阵运算
#+BEGIN_SRC python
## 矩阵运算（二维数组）
a = np.array([[1,2],[3,4]]) # 2行2列
b = np.arange(6).reshape((2,-1)) # 2行3列
print(a,b)
print(a.dot(b)) # 2行3列
#+END_SRC
*** 非数组运算
#+BEGIN_SRC python
## 非数组运算，调用方法
a = np.random.randint(0,5,(2,3))
print(a)
print(a.sum(),a.sum(axis=1),a.sum(0)) # axis用于指定运算轴（默认全部，可指定0或1）
print(a.min(),a.max(axis=1),a.mean(axis=1)) # axis = 0: 按列计算，axis = 1: 按行计算
print(a.cumsum(1)) # 按行计算累积和
#+END_SRC
* 用 Python 操作文本对象
* 用 Logistic 回归构建信用评级
url: https://blog.csdn.net/ligang_csdn/article/details/53838743
** 代码

** 实例
* 用 python 应用随机森林模型
* 用 Python 应用神经网络
